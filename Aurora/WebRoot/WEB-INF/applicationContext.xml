<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<!-- 配置c3p0连接池 -->
	<bean id="DataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" >
		<property name="driverClass" value="net.sourceforge.jtds.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:jtds:sqlserver://localhost:1433/zq"></property>
		<property name="user" value="sa"></property>
		<property name="password" value="sa"></property>
		<!-- 最大链接数 默认为15 -->
		<property name="maxPoolSize" value="60"></property>
		<!-- 最小链接数 -->
		<property name="minPoolSize" value="5"></property>
		<!-- 初始化的连接数,在最大与最小之间 默认为3 -->
		<property name="initialPoolSize" value="10"></property>
		<!-- 链接空闲时间 默认为0秒,即永不丢弃;设置为60时,60秒不用则自动丢弃 -->
		<property name="maxIdleTime" value="60"></property>
		<!-- 当链接用尽时,一次获取的连接数 默认为3 -->
		<property name="acquireIncrement" value="5"></property>
		
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。
			但由于预缓存的statements属于单个connection而不是整个连接池。
			所以设置这个参数需要考虑到多方面的因素。   
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。
			默认: 0--> 
		<property name="maxStatements" value="0"></property>
		<property name="maxStatementsPerConnection" value="0"></property>
		 <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		 <property name="idleConnectionTestPeriod" value="60"></property>
		 <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		 <property name="acquireRetryAttempts" value="10"></property>
		 <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。
		 	但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。
		 	如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。
		 	Default: false-->
		 <property name="breakAfterAcquireFailure" value="true"></property>
		 <!--因性能消耗大,请只在需要的时候使用它。
		 	如果设为true那么在每个connection提交的时候都将校验其有效性。
		 	建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。
		 	Default: false -->
		 	<property name="testConnectionOnCheckout" value="false"></property>
	</bean> 
	
	<!--配置Hibernate的Session工厂，一般hibernate会被spring代为管理 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="DataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.SybaseDialect
				</prop>
				
				<prop key="hibernate.show_sql">
					true
				</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>cn/infogiga/bean/Action.hbm.xml</value>
				<value>cn/infogiga/bean/ActionMenu.hbm.xml</value>
				<value>cn/infogiga/bean/ActionRole.hbm.xml</value>
				<value>cn/infogiga/bean/Application.hbm.xml</value>
				<value>cn/infogiga/bean/Comment.hbm.xml</value>
				<value>cn/infogiga/bean/Customer.hbm.xml</value>
				<value>cn/infogiga/bean/Groups.hbm.xml</value>
				<value>cn/infogiga/bean/Invitation.hbm.xml</value>
				<value>cn/infogiga/bean/Log.hbm.xml</value>
				<value>cn/infogiga/bean/Mmstemplate.hbm.xml</value>
				<value>cn/infogiga/bean/MailTemplate.hbm.xml</value>
				<value>cn/infogiga/bean/Manager.hbm.xml</value>
				<value>cn/infogiga/bean/Qrcode.hbm.xml</value>
				<value>cn/infogiga/bean/Role.hbm.xml</value>
				<value>cn/infogiga/bean/Setting.hbm.xml</value>
				<value>cn/infogiga/bean/Visit.hbm.xml</value></list>
		</property>
	</bean>

	<!-- cn.infogiga.dao配置 -->
	<bean id="AppointmentDAO" class="cn.infogiga.dao.AppointmentDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<bean id="LoginDAO" class="cn.infogiga.dao.LoginDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<bean id="QrcodeDAO" class="cn.infogiga.dao.QrcodeDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<bean id="SettingDAO" class="cn.infogiga.dao.SettingDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<bean id="WapDAO" class="cn.infogiga.dao.WapDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<bean id="CalendarDAO" class="cn.infogiga.dao.CalendarDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<!-- end -->
	
	<!-- cn.infogiga.service配置 -->
	<bean id="AppointmentService" class="cn.infogiga.service.AppointmentService">
		<property name="appointmentDAO" ref="AppointmentDAO"></property>
		<property name="qrcodeDAO" ref="QrcodeDAO"></property>
	</bean>
	
	<bean id="LoginService" class="cn.infogiga.service.LoginService">
		<property name="loginDAO" ref="LoginDAO"></property>
	</bean>
	
	<bean id="QrcodeService" class="cn.infogiga.service.QrcodeService">
		<property name="qrcodeDAO" ref="QrcodeDAO"></property>
	</bean>
		
	<bean id="SettingService" class="cn.infogiga.service.SettingService">
		<property name="settingDAO" ref="SettingDAO"></property>
	</bean>
	
	<bean id="WapService" class="cn.infogiga.service.WapService">
		<property name="wapDAO" ref="WapDAO"></property>
	</bean>
	
	<bean id="CalendarService" class="cn.infogiga.service.CalendarService">
		<property name="calendarDAO" ref="CalendarDAO"></property>
		<property name="appointmentDAO" ref="AppointmentDAO"></property>
	</bean>

	<!-- end -->

	<!-- 配置session延迟关闭 -->
	<bean id="openSessionInViewInterceptor"
          class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="flushMode" value="1"/>
        <property name="singleSession" value="true" />
    </bean>
    <!-- end -->
</beans>