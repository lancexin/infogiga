   <!-- 配置c3p0连接池  -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" >
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/test"></property>
		<property name="user" value="root"></property>
		<property name="password" value="infogiga"></property>
		<!-- 最大链接数 默认为15 -->
		<property name="maxPoolSize" value="60"></property>
		<!-- 最小链接数 -->
		<property name="minPoolSize" value="5"></property>
		<!-- 初始化的连接数,在最大与最小之间 默认为3 -->
		<property name="initialPoolSize" value="10"></property>
		<!-- 链接空闲时间 默认为0秒,即永不丢弃;设置为60时,60秒不用则自动丢弃 -->
		<property name="maxIdleTime" value="60"></property>
		<!-- 当链接用尽时,一次获取的连接数 默认为3 -->
		<property name="acquireIncrement" value="5"></property>
		
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。
			但由于预缓存的statements属于单个connection而不是整个连接池。
			所以设置这个参数需要考虑到多方面的因素。   
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。
			默认: 0--> 
		<property name="maxStatements" value="0"></property>
		<property name="maxStatementsPerConnection" value="0"></property>
		 <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60"></property>
		 <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="10"></property>
		 <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。
		 	但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。
		 	如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。
		 	Default: false-->
		<property name="breakAfterAcquireFailure" value="true"></property>
		 <!--因性能消耗大,请只在需要的时候使用它。
		 	如果设为true那么在每个connection提交的时候都将校验其有效性。
		 	建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。
		 	Default: false -->
		<property name="testConnectionOnCheckout" value="false"></property>
	</bean> 
	
	
	
	<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="user">

	<typeAlias alias="user" type="cn.infogiga.ibatis.pojo.User" />
	<typeAlias alias="power" type="cn.infogiga.ibatis.pojo.Power" /> 
	
	<cacheModel id="user-cache" type="OSCACHE" readOnly="false"  
        serialize="true">  
        <flushInterval hours="24" />  
        <property value="600" name="size" />  
    </cacheModel>  
	
	
	<resultMap class="power" id="power-map">
		<result property="powerID" column="powerID" />
		<result property="powerName" column="powerName" />
		<result property="powerValue" column="powerValue" />
	</resultMap>

	<resultMap class="user" id="uer-map-cascade">
		<result property="userID" column="userID" />
		<result property="userName" column="userName" />
		<result property="passWord" column="passWord" />
		<result property="power" resultMap="user.power-map" />  
	</resultMap>
	
	<resultMap class="user" id="uer-map">
		<result property="userID" column="userID" />
		<result property="userName" column="userName" />
		<result property="passWord" column="passWord" />
		<result property="power" column="powerID" select="findPowerById" />  
	</resultMap>

	<select id="findUserByIdWithCascade" resultMap="user.uer-map-cascade" parameterClass="int">
		select u.userID as userID,
			   u.userName as userName,
			   u.passWord as passWord,
			   p.powerID as powerID,
			   p.powerName as powerName,
			   p.powerValue as powerValue
			   from user u left join power p on u.powerID = p.powerID
			   where u.userID = #userID#
	</select>
	
	<select id="findUserByExample" resultMap="user.uer-map" parameterClass="user">
		select * from user 
			<dynamic prepend="where"> 
				<isNotNull prepend="and" property="userName"> userName= #userName#</isNotNull>
				<isNotNull prepend="and" property="passWord"> passWord= #passWord#</isNotNull>		
			</dynamic>
	</select>
	
	<select id="findUserByExample2" resultMap="user.uer-map-cascade" parameterClass="user">
		select u.userID as userID,
			   u.userName as userName,
			   u.passWord as passWord,
			   p.powerID as powerID,
			   p.powerName as powerName,
			   p.powerValue as powerValue
			   from user u left join power p on u.powerID = p.powerID
			   <dynamic prepend="where"> 
					<isNotNull prepend="and" property="userName"> u.userName like '%$userName$%'</isNotNull>
					<isNotNull prepend="and" property="passWord"> u.passWord like '%$passWord$%'</isNotNull>
					<isNotNull prepend="and" property="power.powerName"> p.powerName like '%$power.powerName$%'</isNotNull>	
					<isNotNull prepend="and" property="power.powerValue"> p.powerValue like '%$power.powerValue$%'</isNotNull>		
			   </dynamic>
	</select>
	
	
	<select id="findUserById" resultMap="user.uer-map" parameterClass="int" cacheModel="user-cache">
		select * from user where userID = #userID#
	</select>
	
	<insert id="saveUser" parameterClass="user">
		insert into user()
	</insert>

</sqlMap>